#!/bin/bash

while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -d|--driver)
    DRIVER="$2"
    shift
    ;;
    -n|--nodes)
    NODES="$2"
    shift
    ;;
    -b|--build-image)
    BUILD_PEGASUS_FILE_PATH="$2"
    shift
    ;;
    -c|--conf)
    CONFIG_FILE="$2"
    shift
    ;;
    -o|--output)
    LOG_FILE="$2"
    shift
    ;;
    -h|--help)
    echo "Usage: `basename $0` [-d DRIVER] [-n NODES] [-b BUILD_IMAGE] [-c CONFIG_FILE]"
    exit 0
    ;;
  esac
  shift
done

# setting default values
if [ -z ${DRIVER+x} ]; then
  DRIVER=virtualbox
else
  if [[ ! $DRIVER =~ virtualbox|amazonec2 ]]; then
    echo "Error: Invalid driver: $DRIVER"
    exit 1
  fi
fi

# number of nodes
if [ -z ${NODES+x} ]; then
  NODES=1
fi

# pegasus build file
if [ -z ${BUILD_PEGASUS_FILE_PATH+x} ]; then
  BUILD_PEGASUS_FILE_PATH=buildPegasusImage.sh
fi

# config file
if [ -z ${CONFIG_FILE+x} ]; then
  CONFIG_FILE=pegasus-docker.conf
fi

# log file
if [ -z ${LOG_FILE+x} ]; then
  LOG_FILE=pegasus-docker.log
fi

PREFIX=[pegasus-docker-deploy]

# read configurations (e.g., amazon ec2) from the config file and assign
# enviroment variables
if [ -f $CONFIG_FILE ]; then
  while read line; do
      echo export $line
      export $line
  done < $CONFIG_FILE
fi

# check command's exit code
# first argument should be the error message
function validate {
    local error_msg=$1
    shift
    "$@" >> $LOG_FILE 2>&1
    local status=$?
    if [ $status -ne 0 ]; then
        echo "Error: $error_msg (see log file: $LOG_FILE)" >&2
        exit $status
    fi
    return $status
}

echo "Initializing pegasus-docker-deploy"
echo "$PREFIX Log File: $LOG_FILE"
echo "$PREFIX Driver: $DRIVER"
echo "$PREFIX"


#1 - create key-value store
echo "$PREFIX Launching pegasus-keystore host"
echo -ne "$PREFIX   ..."
validate "Unable to launch pegasus-keystore host" \
  docker-machine create -d $DRIVER pegasus-keystore
echo -ne "\r$PREFIX   Completed"
echo -ne "\n"

if [[ $DRIVER =~ amazonec2 ]]; then
  # Open the required ports:
  # 8500 will be used by the key-value store
  # 7946 (TCP and UDP) and 4789 will be used by the overlay network
  # 9618 will be used by Condor
  DOCKER_SG_ID="$(aws ec2 describe-security-groups | grep -A 3 "docker-machine" | grep "GroupId" | sed -n 's/"GroupId": "\(.*\)\"/\1/gp' | sed -n 's/ //gp')"
  echo "$PREFIX docker-machine security group id: $DOCKER_SG_ID"
  echo "$PREFIX Opening required ports"
  for port in 8500 7946 9618 7946 4789; do
    validate "AWS EC2: Unable to open required port: $port" \
      aws ec2 authorize-security-group-ingress --group-id $DOCKER_SG_ID --protocol tcp --port $port --cidr 0.0.0.0/0
  done
fi

eval "$(docker-machine env pegasus-keystore)"

echo "$PREFIX Running consul container over pegasus-keystore host"
validate "Unable to start consul" \
  docker run -d -p "8500:8500" -h "consul" progrium/consul -server -bootstrap


# 2 - create swarm cluster

# set driver-related variables
ETHERNET=eth0
HOME_DIR=/home/ubuntu

if [[ $DRIVER =~ virtualbox ]]; then
  ETHERNET=eth1
  HOME_DIR=/home/docker
fi

# create swarm master host
echo "$PREFIX Launching swarm manager host (pegasus-submit-node)"
echo -ne "$PREFIX   ..."
validate "Unable to launch swarm manager host" \
  docker-machine create -d $DRIVER --swarm --swarm-master --swarm-discovery="consul://$(docker-machine ip pegasus-keystore):8500" --engine-opt="cluster-store=consul://$(docker-machine ip pegasus-keystore):8500" --engine-opt="cluster-advertise=$ETHERNET:2376" pegasus-submit-node
echo -ne "\r$PREFIX   Completed"
echo -ne "\n"

# create swarm workers hosts
i=1
echo "$PREFIX Launching swarm pegasus-worker hosts"
while [ $i -le $NODES ]; do
    echo "$PREFIX   pegasus-worker$i"
    validate "Unable to launch swam worker$i host" \
      docker-machine create -d $DRIVER --swarm --swarm-discovery="consul://$(docker-machine ip pegasus-keystore):8500" --engine-opt="cluster-store=consul://$(docker-machine ip pegasus-keystore):8500" --engine-opt="cluster-advertise=$ETHERNET:2376" pegasus-worker$i &
    let i=i+1
done

echo -ne "$PREFIX   ..."
wait
echo -ne "\r$PREFIX   Completed"
echo -ne "\n"

# 3 - create the overlay network
eval $(docker-machine env --swarm pegasus-submit-node)
echo "$PREFIX Creating overlay network"
validate "Unable to create overlay network" \
  docker network create --driver overlay --subnet=10.0.9.0/24 pegasus-net


# 4 - Run application on swarms hosts using the overlay network

# copy the dockerfiles to the swarm master host
# echo "$PREFIX Transferring Dockerfiles to swarm hosts"
# validate "Unable to transfer Docker files to master host" \
#   docker-machine scp $BUILD_PEGASUS_FILE_PATH pegasus-submit-node:$HOME_DIR/build.sh
#
#
# i=1
# while [ $i -le $NODES ]; do
#     echo "$PREFIX Copying Dockerfile to pegasus-worker$i"
#     validate "Unable to transfer Docker files to worker$i" \
#       docker-machine scp $BUILD_PEGASUS_FILE_PATH pegasus-worker$i:$HOME_DIR/build.sh
#     let i=i+1
# done

# create pegasus docker images.
# echo "$PREFIX Building pegasus:submit image on pegasus-submit-node host"
# echo -ne "$PREFIX   ..."
# validate "Unable to set execution permission to Docker file on pegasus-submit-node host" \
#   docker-machine ssh pegasus-submit-node chmod a+x build.sh
# validate "Unable to build Docker instance on pegasus-submit-node host" \
#   docker-machine ssh pegasus-submit-node sh build.sh
# echo -ne "\r$PREFIX   Completed"
# echo -ne "\n"
#
# echo "$PREFIX Building pegasus:worker image on workers hosts"
# i=1
# while [ $i -le $NODES ]; do
#     echo "$PREFIX   Building pegasus:worker image on pegasus-worker$i host"
#     echo -ne "$PREFIX   ..."
#     validate "Unable to set execution permission to Docker file on pegasus-worker$i host" \
#       docker-machine ssh pegasus-worker$i chmod a+x build.sh
#     validate "Unable to build Docker instance on pegasus-worker$i host" \
#       docker-machine ssh pegasus-worker$i sh build.sh worker
#     echo -ne "\r$PREFIX   Completed"
#     echo -ne "\n"
#     let i=i+1
# done

# run condor head container on submit host
eval $(docker-machine env --swarm pegasus-submit-node)
echo "$PREFIX Launching pegasus submit container on pegasus-submit-node host"
echo -ne "$PREFIX   ..."
validate "Unable to start submit container" \
  docker run -itd -h submit --name=submit --net=pegasus-net -e constraint:node==pegasus-submit-node pegasusdocker/deploy:submit-centos7
echo -ne "\r$PREFIX   Completed"
echo -ne "\n"

# run condor worker container workers hosts
i=1
echo "$PREFIX Launching pegasus worker containers on worker hosts"
while [ $i -le $NODES ]; do
    echo "$PREFIX   pegasus-worker$i"
    validate "Unable to start worker$i container" \
      docker run -itd -h worker$i --name=worker$i --net=pegasus-net -e constraint:node==pegasus-worker$i pegasusdocker/deploy:worker-centos7 &
    let i=i+1
done

echo -ne "$PREFIX   ..."
wait
echo -ne "\r$PREFIX   Completed"
echo -ne "\n"

#open the submit containerâ€™s bash
echo "$PREFIX Logging into the pegasus submit container (password: pegasus123)"
docker exec -it submit bash
